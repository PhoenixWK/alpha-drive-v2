--CREATE POLICIES FOR 'user_porfile' table--

create policy "only user able to view its profile"
on user_profile
for select
to authenticated
using(auth.uid() = user_id);

create policy "only user able to modify its profile"
on user_profile
for insert
to authenticated
with check(
  user_id=auth.uid() and role!='admin'
);

create policy "only user able to update its profile"
on user_profile
for update
to authenticated
with check(
  user_id=auth.uid() and role!='admin'
);

create policy "only user able to delete its profile"
on user_profile
for delete
to authenticated
using(
  user_id=auth.uid() and role!='admin'
);


--CREATE POLICIES FOR 'plans' table--

create policy "super admin and admin are able to view the service's plans"
on plans
for select
to authenticated
using (
  exists (
    select 1 
    from user_profile
    where user_id=auth.uid() and (role='super_admin' or role='admin')
  )
);

create policy "only super admin are able to create new service's plans"
on plans 
for insert
to authenticated
with check (
  exists (
    select 1 
    from user_profile
    where user_id=auth.uid() and role='super_admin'
  )
);

create policy "only super admin are able to update the existing service's plans"
on plans 
for update
to authenticated
with check (
  exists (
    select 1 
    from user_profile
    where user_id=auth.uid() and role='super_admin'
  )
);

create policy "only super admin are able to delete the existing service's plans"
on plans 
for delete
to authenticated
using (
  exists (
    select 1 
    from user_profile
    where user_id=auth.uid() and role='super_admin'
  )
);

--CREATE POLICY FOR 'nations' table--
create policy "super admin and admin are able to view rows"
on nations
for select
to authenticated 
using (
  exists(
    select 1 
    from user_profile
    where user_id=auth.uid() and (role='super_admin' or role='admin')
  )
);

create policy "only super admin are able to insert new the nations"
on nations
for insert
to authenticated
with check (
  exists (
    select 1 
    from user_profile 
    where user_id=auth.uid() and role='super_admin'
  )
);

create policy "only super admin are able to update the existing nations"
on nations
for update
to authenticated
with check (
  exists (
    select 1 
    from user_profile 
    where user_id=auth.uid() and role='super_admin'
  )
);

create policy "only super admin are able to delete the existing nations"
on nations
for delete
to authenticated
using (
  exists (
    select 1 
    from user_profile 
    where user_id=auth.uid() and role='super_admin'
  )
);

--CREATE POLICY FOR 'owned_plan' table--
create policy "users can view their owned plan"
on owned_plan
for select
to authenticated
using (
  exists (
    select 1 
    from user_profile
    where (user_id=auth.uid() and role='user')
  )
);

create policy "admins can view the users' owned plan"
on owned_plan
for select
to authenticated
using (
  exists (
    select 1 
    from user_profile 
    where user_id=auth.uid() and role='admin'
  )
);

create policy "users can apply heir owned plan"
on owned_plan
for insert
to authenticated
with check (auth.uid() = user_id);


create policy "users can update their owned plan"
on owned_plan
for update 
to authenticated
with check (auth.uid() = user_id);

create policy "users can delete their owned plan"
on owned_plan
for delete
to authenticated
using (auth.uid() = user_id);

--CREATE POLICY FOR 'user_storage_used' table--
create policy "users can view their used storage"
on user_storage_used
for select
to authenticated
using (
  exists (
    select 1
    from user_storage_used us
    join user_profile uf on us.user_id=uf.user_id 
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "admins can view the users' used storage"
on user_storage_used
for select
to authenticated
using (
  exists (
    select 1
    from user_storage_used us
    join user_profile uf on us.user_id=uf.user_id 
    where uf.user_id=auth.uid() and uf.role='admin'
  )
);

create policy "users can insert their used storage"
on user_storage_used
for insert
to authenticated
with check (
  exists (
    select 1
    from user_storage_used us
    join user_profile uf on us.user_id=uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users can update their used storage"
on user_storage_used
for update
to authenticated
with check (
  exists (
    select 1
    from user_storage_used us
    join user_profile uf on us.user_id=uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users can delete their used storage"
on user_storage_used
for delete
to authenticated
using (
  exists (
    select 1
    from user_storage_used us
    join user_profile uf on us.user_id=uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);


--CREATE POLICY FOR 'folders' table--
create policy "users are able to view their folders"
on folders 
for select
to authenticated
using (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to create their new folders"
on folders 
for insert
to authenticated
with check (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to update their existing folders"
on folders 
for update
to authenticated
with check (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to delete their existing folders"
on folders 
for delete
to authenticated
using (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

--CREATE POLICY FOR 'files' table--
create policy "users are able to view their files"
on files
for select
to authenticated
using (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    join files fi
    on fi.folder_id = f.folder_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to insert their new files"
on files
for insert
to authenticated
with check (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    join files fi
    on fi.folder_id = f.folder_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to update their existing files"
on files
for update
to authenticated
with check (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    join files fi
    on fi.folder_id = f.folder_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

create policy "users are able to delete their existing files"
on files
for delete
to authenticated
using (
  exists (
    select 1 
    from user_profile uf 
    join folders f
    on f.created_by = uf.user_id
    join files fi
    on fi.folder_id = f.folder_id
    where uf.user_id=auth.uid() and uf.role='user'
  )
);

--CREATE POLICY FOR 'file_permission' table--
create policy "users can manage their file permissions"
on file_permissions
for all
to authenticated
using (
  exists (
    select 1 from file_permissions fp
    join files f on f.file_id = fp.file_id
    join user_profile up on up.user_id = f.created_by
    where up.user_id = auth.uid() and up.role='user'
  )
);

--CREATE POLICY FOR 'shared_file' table--
create policy "user is allowed to manage their shared files"
on shared_files
for all
to authenticated
using(
  exists (
    select 1 from shared_files sf
    join files f on sf.file_id=f.file_id
    join user_profile up on up.user_id= f.created_by
    where up.user_id=auth.uid() and up.role='user'
  )
)